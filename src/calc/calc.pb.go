// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/calc.proto

/*
Package calc is a generated protocol buffer package.

It is generated from these files:
	proto/calc.proto

It has these top-level messages:
	AddRequest
	AddReply
	SubRequest
	SubReply
	MultRequest
	MultReply
	DivRequest
	DivReply
*/
package calc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddRequest struct {
	Num1 int64 `protobuf:"varint,1,opt,name=num1" json:"num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=num2" json:"num2,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddRequest) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *AddRequest) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type AddReply struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddReply) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SubRequest struct {
	Num1 int64 `protobuf:"varint,1,opt,name=num1" json:"num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=num2" json:"num2,omitempty"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubRequest) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *SubRequest) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type SubReply struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *SubReply) Reset()                    { *m = SubReply{} }
func (m *SubReply) String() string            { return proto.CompactTextString(m) }
func (*SubReply) ProtoMessage()               {}
func (*SubReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubReply) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type MultRequest struct {
	Num1 int64 `protobuf:"varint,1,opt,name=num1" json:"num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=num2" json:"num2,omitempty"`
}

func (m *MultRequest) Reset()                    { *m = MultRequest{} }
func (m *MultRequest) String() string            { return proto.CompactTextString(m) }
func (*MultRequest) ProtoMessage()               {}
func (*MultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MultRequest) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *MultRequest) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type MultReply struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *MultReply) Reset()                    { *m = MultReply{} }
func (m *MultReply) String() string            { return proto.CompactTextString(m) }
func (*MultReply) ProtoMessage()               {}
func (*MultReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MultReply) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type DivRequest struct {
	Num1 int64 `protobuf:"varint,1,opt,name=num1" json:"num1,omitempty"`
	Num2 int64 `protobuf:"varint,2,opt,name=num2" json:"num2,omitempty"`
}

func (m *DivRequest) Reset()                    { *m = DivRequest{} }
func (m *DivRequest) String() string            { return proto.CompactTextString(m) }
func (*DivRequest) ProtoMessage()               {}
func (*DivRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DivRequest) GetNum1() int64 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *DivRequest) GetNum2() int64 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type DivReply struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *DivReply) Reset()                    { *m = DivReply{} }
func (m *DivReply) String() string            { return proto.CompactTextString(m) }
func (*DivReply) ProtoMessage()               {}
func (*DivReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DivReply) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "calc.AddRequest")
	proto.RegisterType((*AddReply)(nil), "calc.AddReply")
	proto.RegisterType((*SubRequest)(nil), "calc.SubRequest")
	proto.RegisterType((*SubReply)(nil), "calc.SubReply")
	proto.RegisterType((*MultRequest)(nil), "calc.MultRequest")
	proto.RegisterType((*MultReply)(nil), "calc.MultReply")
	proto.RegisterType((*DivRequest)(nil), "calc.DivRequest")
	proto.RegisterType((*DivReply)(nil), "calc.DivReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Calc service

type CalcClient interface {
	// define calc function
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error)
	Mult(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultReply, error)
	Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivReply, error)
}

type calcClient struct {
	cc *grpc.ClientConn
}

func NewCalcClient(cc *grpc.ClientConn) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/calc.Calc/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error) {
	out := new(SubReply)
	err := grpc.Invoke(ctx, "/calc.Calc/Sub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Mult(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultReply, error) {
	out := new(MultReply)
	err := grpc.Invoke(ctx, "/calc.Calc/Mult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivReply, error) {
	out := new(DivReply)
	err := grpc.Invoke(ctx, "/calc.Calc/Div", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Calc service

type CalcServer interface {
	// define calc function
	Add(context.Context, *AddRequest) (*AddReply, error)
	Sub(context.Context, *SubRequest) (*SubReply, error)
	Mult(context.Context, *MultRequest) (*MultReply, error)
	Div(context.Context, *DivRequest) (*DivReply, error)
}

func RegisterCalcServer(s *grpc.Server, srv CalcServer) {
	s.RegisterService(&_Calc_serviceDesc, srv)
}

func _Calc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Sub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Mult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Mult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Mult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Mult(ctx, req.(*MultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.Calc/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Div(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calc_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calc_Sub_Handler,
		},
		{
			MethodName: "Mult",
			Handler:    _Calc_Mult_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _Calc_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calc.proto",
}

func init() { proto.RegisterFile("proto/calc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4e, 0xcc, 0x49, 0xd6, 0x03, 0x33, 0x85, 0x58, 0x40, 0x6c, 0x25, 0x13, 0x2e,
	0x2e, 0xc7, 0x94, 0x94, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xd2, 0x5c, 0x43, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x30, 0x1b, 0x2a, 0x66, 0x24, 0xc1,
	0x04, 0x17, 0x33, 0x52, 0x52, 0xe2, 0xe2, 0x00, 0xeb, 0x2a, 0xc8, 0xa9, 0x14, 0x12, 0xe3, 0x62,
	0x2b, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x81, 0xea, 0x82, 0xf2, 0x40, 0x26, 0x07, 0x97, 0x26, 0x91,
	0x61, 0x32, 0x58, 0x17, 0x3e, 0x93, 0x4d, 0xb9, 0xb8, 0x7d, 0x4b, 0x73, 0x4a, 0x48, 0x35, 0x5a,
	0x99, 0x8b, 0x13, 0xa2, 0x8d, 0x80, 0xab, 0x5d, 0x32, 0xcb, 0xc8, 0x70, 0x35, 0x58, 0x17, 0x1e,
	0x93, 0x8d, 0xb6, 0x32, 0x72, 0xb1, 0x38, 0x27, 0xe6, 0x24, 0x0b, 0x69, 0x72, 0x31, 0x3b, 0xa6,
	0xa4, 0x08, 0x09, 0xe8, 0x81, 0x23, 0x03, 0x11, 0xfa, 0x52, 0x7c, 0x48, 0x22, 0x05, 0x39, 0x95,
	0x4a, 0x0c, 0x20, 0xa5, 0xc1, 0xa5, 0x49, 0x30, 0xa5, 0x88, 0xe0, 0x84, 0x29, 0x85, 0x05, 0x95,
	0x12, 0x83, 0x90, 0x0e, 0x17, 0x0b, 0xc8, 0x77, 0x42, 0x82, 0x10, 0x19, 0xa4, 0x00, 0x92, 0xe2,
	0x47, 0x16, 0x82, 0x1b, 0xec, 0x92, 0x59, 0x06, 0x33, 0x18, 0xe1, 0x63, 0x98, 0xc1, 0x30, 0xdf,
	0x28, 0x31, 0x24, 0xb1, 0x81, 0x93, 0x8b, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x15, 0x7b,
	0xc5, 0x42, 0x02, 0x00, 0x00,
}
